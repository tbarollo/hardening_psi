#!/bin/bash

# Scripts para verificação de pendencias de Hardening
# Fase 1 - Validar valores atuais e gerar report sobre comando executado, valor atual e se está em compliance;
# Fase 2 - Validar possíveis melhorias;
# Fase 3 - Aplicar melhorias e rodar novamente as checagens da Fase 1;
# 

# Source function library.
. /etc/rc.d/init.d/functions

arquivodelog="hardening_fast.log"

if [[ -f "$arquivodelog" ]]; then
	arquivologsemsulfixo=$(ls $arquivodelog | sed 's/\..*//g')
	cp $arquivodelog $arquivologsemsulfixo-$(date +%Y%m%d-%H%M%S).log
fi
> $arquivodelog

curassunto=/dev/null
curitem=/dev/null

default="\033[01;0m"
verde="\033[01;32m"
ciano="\033[01;36m"

mudacor(){
	case "$1" in
    	default)
        	echo -en "$default" | tee -a $arquivodelog
        	;;
    	verde)
        	echo -en $verde | tee -a $arquivodelog
        	;;
    	ciano)
        	echo -en "$ciano" | tee -a $arquivodelog
        	;;
	esac
}

check-conformidade() {
	if [ $? -eq 0 ]
	then
		mudacor ciano
        	echo -n "Item '$curitem' em conformidade:" | tee -a $arquivodelog
		success | tee -a $arquivodelog
	else
		mudacor ciano
        	echo -n "Item '$curitem' em conformidade:" | tee -a $arquivodelog
		failure | tee -a $arquivodelog
		((ret+=1))
	fi
}

check-warning() {
	if [ $? -eq 0 ]
	then
		mudacor ciano
        	echo -n "Item '$curitem' em conformidade:" | tee -a $arquivodelog
		success | tee -a $arquivodelog
	else
		mudacor ciano
        	echo -n "Item '$curitem' em conformidade:" | tee -a $arquivodelog
		warning | tee -a $arquivodelog
		((ret+=1))
	fi
}

database() {
	[ $curassunto == "1" ] && assunto="Configuração de rede"
	[ $curassunto == "2" ] && assunto="Desabilitar ou remover serviços não utilizados"
	[ $curassunto == "3" ] && assunto="Requisitos de senha"
	[ $curassunto == "4" ] && assunto="Configuração de SSH"
	[ $curassunto == "5" ] && assunto="Log e auditoria"
	[ $curassunto == "6" ] && assunto="Configuração de rede"
 
	[ $curitem == "1.01" ] && item="Disable Automounting"
	[ $curitem == "1.02" ] && item="Ensure SELinux is installed"
	[ $curitem == "1.03" ] && item="Ensure local login warning banner is configured properly"
	[ $curitem == "1.04" ] && item="Ensure permissions on /etc/motd are configured"
	[ $curitem == "1.05" ] && item="Ensure permissions on /etc/issue are configured"
	[ $curitem == "1.06" ] && item="Ensure permissions on /etc/issue.net"

	[ $curitem == "2.01" ] && item="Ensure updates, patches, and additional security software are installed"
	[ $curitem == "2.02" ] && item="Ensure chargen services are not enabled"
	[ $curitem == "2.03" ] && item="Ensure daytime services are not enabled"
	[ $curitem == "2.04" ] && item="Ensure discard services are not enabled"
	[ $curitem == "2.05" ] && item="Ensure tftp services are not enabled"
	[ $curitem == "2.06" ] && item="Ensure time synchronization is in use (chrony)"
	[ $curitem == "2.07" ] && item="Ensure ntp is configured"
	[ $curitem == "2.08" ] && item="Ensure CUPS is not enabled"
	[ $curitem == "2.09" ] && item="Ensure DHCP Server is not enabled"
	[ $curitem == "2.10" ] && item="Ensure LDAP server is not enabled"
	[ $curitem == "2.11" ] && item="Ensure NFS and RPC are not enabled"
	[ $curitem == "2.12" ] && item="Ensure DNS Server is not enabled"
	[ $curitem == "2.13" ] && item="Ensure FTP Server is not enabled"
	[ $curitem == "2.14" ] && item="Ensure HTTP server is not enabled"
	[ $curitem == "2.15" ] && item="Ensure IMAP and POP3 server is not enabled"
	[ $curitem == "2.16" ] && item="Ensure Samba is not enabled"
	[ $curitem == "2.17" ] && item="Ensure HTTP Proxy Server is not enabled"
	[ $curitem == "2.18" ] && item="Ensure tftp server is not enabled"
	[ $curitem == "2.19" ] && item="Ensure IPv6 is disabled"
	[ $curitem == "2.20" ] && item="Ensure auditd service is enabled"

	[ $curitem == "3.01" ] && item="Set Lockout for Failed Password Attempts"
	[ $curitem == "3.02" ] && item="Ensure password hashing algorithm is SHA-512"
	[ $curitem == "3.03" ] && item="Ensure system accounts are non-login"
	[ $curitem == "3.04" ] && item="Ensure permissions on /etc/passwd are configured"
	[ $curitem == "3.05" ] && item="Ensure permissions on /etc/group are configured"
	[ $curitem == "3.06" ] && item="Ensure permissions on /etc/shadow are configured"
	[ $curitem == "3.07" ] && item="Ensure permissions on /etc/gshadow are configured"
	[ $curitem == "3.08" ] && item="Ensure permissions on /etc/passwd- are configured"
	[ $curitem == "3.09" ] && item="Ensure permissions on /etc/shadow- are configured"
	[ $curitem == "3.10" ] && item="Ensure permissions on /etc/group- are configured"
	[ $curitem == "3.11" ] && item="Ensure permissions on /etc/gshadow- are configured"
	[ $curitem == "3.12" ] && item="Ensure user home directories permissions are 750 or more restrictive"
	[ $curitem == "3.13" ] && item="Ensure users own their home directories"
	[ $curitem == "3.14" ] && item="Ensure all groups in /etc/passwd exist in /etc/group"
	[ $curitem == "3.15" ] && item="Ensure no duplicate UIDs exist"
	[ $curitem == "3.16" ] && item="Ensure no duplicate GIDs exist"
	[ $curitem == "3.17" ] && item="Ensure no duplicate user names exist"
	[ $curitem == "3.18" ] && item="Ensure no duplicate group names exist"

	[ $curitem == "4.01" ] && item="Ensure SSH Protocol is set to 2"
	[ $curitem == "4.02" ] && item="Ensure SSH LogLevel is set to INFO"
	[ $curitem == "4.03" ] && item="Ensure SSH X11 forwarding is disabled"	
	[ $curitem == "4.04" ] && item="Ensure SSH MaxAuthTries is set to 4 or less"
	[ $curitem == "4.05" ] && item="Ensure SSH HostbasedAuthentication is disabled"	
	[ $curitem == "4.06" ] && item="Ensure SSH root login is disabled"
	[ $curitem == "4.07" ] && item="Ensure SSH PermitEmptyPasswords is disabled"
	[ $curitem == "4.08" ] && item="Ensure SSH PermitUserEnvironment is disabled"
	[ $curitem == "4.09" ] && item="Ensure only approved ciphers are used"
	[ $curitem == "4.10" ] && item="Ensure SSH warning banner is configured"
	[ $curitem == "4.11" ] && item="Ensure SSH access is limited"

	[ $curitem == "5.01" ] && item="Configure /etc/rsyslog.conf"
	[ $curitem == "5.02" ] && item="Configure rsyslog to Send Logs to a Remote Log Host"
	[ $curitem == "5.03" ] && item="Activate the rsyslog Service"
	[ $curitem == "5.04" ] && item="Record Events That Modify the Systems Mandatory Access Controls"
	[ $curitem == "5.05" ] && item="Collect Login and Logout Events"
	[ $curitem == "5.06" ] && item="Collect Session Initiation Information"
	[ $curitem == "5.07" ] && item="Collect Discretionary Access Control Permission Modification Events"
	[ $curitem == "5.08" ] && item="Collect Unsuccessful Unauthorized Access Attemptsto Files"
	[ $curitem == "5.09" ] && item="Collect Successful File System Mounts"
	[ $curitem == "5.10" ] && item="Collect Changes to System Administration Scope"
	[ $curitem == "5.11" ] && item="Collect System Administrator Actions"

	[ $curitem == "6.01" ] && item="Enable TCP SYN Cookies"
	[ $curitem == "6.02" ] && item="Disable IP Forwarding"
	[ $curitem == "6.03" ] && item="Ensure packet redirect sending is disabled"
	[ $curitem == "6.04" ] && item="Ensure source routed packets are not accepted"
	[ $curitem == "6.05" ] && item="Disable ICMP Redirect Acceptance"
	[ $curitem == "6.06" ] && item="Disable Secure ICMP Redirect Acceptance"
	[ $curitem == "6.07" ] && item="Ensure broadcast ICMP requests are ignored"
	[ $curitem == "6.08" ] && item="Enable Bad Error Message Protection"
	[ $curitem == "6.09" ] && item="Enable RFC-recommended Source Route Validation"
	[ $curitem == "6.10" ] && item="Ensure TCP SYN Cookies is enabled"
	[ $curitem == "6.11" ] && item="Deactivate Wireless Interfaces"
}

## 00 - Checagem geral

function_existe() {
    declare -f -F $1 > /dev/null
    return $?
}

check-all() {
	for a in {1..6}; do
		local ret=0
		for b in 0{1..9} {10..20}; do
			function_existe check-$a$b
			if [ $? -eq 0 ]
			then
				curitem="$a.$b"
				database
				mudacor ciano; echo "Checando item requerido $curitem - $atem..." | tee -a $arquivodelog; mudacor default
				check-$a$b
				echo | tee -a $arquivodelog; echo | tee -a $arquivodelog
			fi
		done
		curassunto=$a
		database
		mudacor verde
		echo -n "$curassunto - $assunto:" | tee -a $arquivodelog
		mudacor default
		if [ $ret -eq 0 ]
		then
			success | tee -a $arquivodelog
		else
			failure | tee -a $arquivodelog
		fi
		echo | tee -a $arquivodelog
	done
}

check-unico() {
	function_existe check-$numero
	if [ $? -eq 0 ]
	then
		curitem="$(echo $numero | sed 's/./&./1')"
		database
		mudacor ciano; echo "Checando item requerido $curitem - $item..." | tee -a $arquivodelog; mudacor default
		check-$numero
		echo | tee -a $arquivodelog; echo | tee -a $arquivodelog
	else
		echo "O numero de item informado não foi encontrado."
		echo "Exemplo:"
		echo "	Para checar o item 4.03, utilize o formato 403."
		echo "	./hardening-fast.sh check 403"
		exit 1
	fi
}

apply-unico() {
	function_existe apply-$numero
	if [ $? -eq 0 ]
	then
		curitem="$(echo $numero | sed 's/./&./1')"
		database
		mudacor ciano; echo "Aplicando melhoria para o item requerido $curitem - $item"; mudacor default
		apply-$numero
	else
		echo "O numero de item informado não foi encontrado."
		echo "Exemplo:"
		echo "	Para aplicar a melhoria do item 4.03, utilize o formato 403."
		echo "	./hardening-fast.sh apply 403"
		exit 1
	fi
}


## 1 - Configuração de Sistemas de arquivos

check-101() {
	echo "-	Comando: systemctl is-enabled autofs" | tee -a $arquivodelog
	echo "-	Resultado: " | tee -a $arquivodelog
	mudacor default

	systemctl is-enabled autofs | tee -a $arquivodelog
	systemctl is-enabled autofs &> /dev/null
	[ $? -eq 1 ] && true || false
	check-conformidade
}

apply-101() {
	systemctl disable autofs
}

check-102() {
	echo "-	Comando: rpm -q libselinux" | tee -a $arquivodelog
	echo "-	Resultado: " | tee -a $arquivodelog
	mudacor default

	rpm -q libselinux | tee -a $arquivodelog
	rpm -q libselinux | egrep -q "^libselinux-[0-9]{1,}\.[0-9]{1,}.*\.el7\.x86_64"
	check-conformidade
}

apply-102() {
	yum install libselinux -y
}

check-103() {
	echo "-	Comando: egrep '(\\\v|\\\r|\\\m|\\\s)' /etc/issue" | tee -a $arquivodelog
	echo "-	Resultado: " | tee -a $arquivodelog
	mudacor default

	egrep '(\\v|\\r|\\m|\\s)' /etc/issue | tee -a $arquivodelog
	egrep -q '(\\v|\\r|\\m|\\s)' /etc/issue
	[ $? -eq 1 ] && true || false
	check-conformidade
}

apply-103() {
	sed -e.bak-$curitem-$(date +%Y%m%d-%H%M%S) -e 's/\\v//g' -e 's/\\r//g' -s 's/\\m//g' -e 's/\\s//g' /etc/issue
}

check-104() {
	echo "-	Comando: stat /etc/motd | grep Access" | tee -a $arquivodelog
	echo "-	Resultado: " | tee -a $arquivodelog
	mudacor default

	stat /etc/motd | grep Uid | tee -a $arquivodelog
	stat /etc/motd | grep Uid | grep -q "Access: (0644/-rw-r--r--)  Uid: (    0/    root)   Gid: (    0/    root)"
	check-conformidade
}

apply-104() {
	chmod 644 /etc/motd
	chown root.root /etc/motd
}

check-105() {
	echo "-	Comando: stat /etc/issue | grep Access" | tee -a $arquivodelog
	echo "-	Resultado: " | tee -a $arquivodelog
	mudacor default

	stat /etc/issue | grep Uid | tee -a $arquivodelog
	stat /etc/issue | grep Uid | grep -q "Access: (0644/-rw-r--r--)  Uid: (    0/    root)   Gid: (    0/    root)"
	check-conformidade
}

apply-105() {
	chmod 644 /etc/issue
	chown root.root /etc/issue
}

check-106() {
	echo "-	Comando: stat /etc/issue.net | grep Access" | tee -a $arquivodelog
	echo "-	Resultado: " | tee -a $arquivodelog
	mudacor default
	stat /etc/issue.net | grep Uid | tee -a $arquivodelog
	stat /etc/issue.net | grep Uid | grep -q "Access: (0644/-rw-r--r--)  Uid: (    0/    root)   Gid: (    0/    root)"
	check-conformidade
}

apply-106() {
	chmod 644 /etc/issue.net
	chown root.root /etc/issue.net
}

## 2 - Desabilitar ou remover serviços não utilizados

check-201() {

	echo "Atualizando o repositório yum para checagem..." | tee -a $arquivodelog
	#yum clean all &> /dev/null
	yum repolist &> /dev/null

	echo "-	Comando: yum check-update" | tee -a $arquivodelog
	echo "-	Resultado: " | tee -a $arquivodelog
	mudacor default
	yum check-update | tee -a $arquivodelog
	
	mudacor ciano
	echo "-	Comando: yum history" | tee -a $arquivodelog
	echo "-	Resultado: " | tee -a $arquivodelog
	mudacor default
	yum history | tee -a $arquivodelog

	yum check-update &> /dev/null
	check-warning
}

apply-201() {
	echo "$(yum check-update -q | grep -v "^$" | wc -l) pacotes desatualizados."
	echo "Realizar a verificação dos mesmos manualmente."
}

check-202() {
	echo '-	Comando: systemctl list-units | grep "xinetd\|chargen"' | tee -a $arquivodelog
	echo "-	Resultado: " | tee -a $arquivodelog
	mudacor default
	systemctl list-units | grep "xinetd\|chargen" | tee -a $arquivodelog
	systemctl list-units | grep "xinetd\|chargen" &> /dev/null
	[ $? -eq 1 ] && true || false
	check-conformidade
}

apply-202() {
	systemctl disable xinetd
	systemctl disable chargen
}

check-203() {
	echo '-	Comando: systemctl list-units | grep "xinetd\|daytime"' | tee -a $arquivodelog
	echo "-	Resultado: " | tee -a $arquivodelog
	mudacor default
	systemctl list-units | grep "xinetd\|daytime" | tee -a $arquivodelog
	systemctl list-units | grep "xinetd\|daytime" &> /dev/null
	[ $? -eq 1 ] && true || false
	check-conformidade
}

apply-203() {
	systemctl disable xinetd
	systemctl disable daytime
}

check-204() {
	echo '-	Comando: systemctl list-units | grep "xinetd\|discard"' | tee -a $arquivodelog
	echo "-	Resultado: " | tee -a $arquivodelog
	mudacor default
	systemctl list-units | grep "xinetd\|discard" | tee -a $arquivodelog
	systemctl list-units | grep "xinetd\|discard" &> /dev/null
	[ $? -eq 1 ] && true || false
	check-conformidade
}

apply-204() {
	systemctl disable xinetd
	systemctl disable discard
}

check-205() {
	echo '-	Comando: systemctl list-units | grep "xinetd\|tftp"' | tee -a $arquivodelog
	echo "-	Resultado: " | tee -a $arquivodelog
	mudacor default
	systemctl list-units | grep "xinetd\|tftp" | tee -a $arquivodelog
	systemctl list-units | grep "xinetd\|tftp" &> /dev/null
	[ $? -eq 1 ] && true || false
	check-conformidade
}

apply-205() {
	systemctl disable xinetd
	systemctl disable tftp
}

check-206() {
	echo '-	Comando: rpm -q chrony' | tee -a $arquivodelog
	echo "-	Resultado: " | tee -a $arquivodelog
	mudacor default
	rpm -q chrony | tee -a $arquivodelog
	check-conformidade
}

apply-206() {
	yum install -y chrony
	systemctl enable chronyd
}

check-207() {
	echo '-	Comando: grep "^server" /etc/chrony.conf' | tee -a $arquivodelog
	echo "-	Resultado: " | tee -a $arquivodelog
	mudacor default
	grep "^server" /etc/chrony.conf | tee -a $arquivodelog
	grep "^server" /etc/chrony.conf | egrep -q "10.1.70.2|10.1.70.3"
	check-conformidade
}

apply-207() {
	sed -i.bkp-$(date +%Y%m%d-%H%M%S) -e '/^server*/d' /etc/chrony.conf
	echo "server 10.1.70.2" >> /etc/chrony.conf
	echo "server 10.1.70.3" >> /etc/chrony.conf
}

check-208() {
	echo "-	Comando: systemctl is-enabled cups" | tee -a $arquivodelog
	echo "-	Resultado: " | tee -a $arquivodelog
	mudacor default

	systemctl is-enabled cups | tee -a $arquivodelog
	systemctl is-enabled cups &> /dev/null
	[ $? -eq 1 ] && true || false
	check-conformidade
}

apply-208() {
	systemctl disable cups
}

check-209() {
	echo "-	Comando: systemctl is-enabled dhcpd" | tee -a $arquivodelog
	echo "-	Resultado: " | tee -a $arquivodelog
	mudacor default

	systemctl is-enabled dhcpd | tee -a $arquivodelog
	systemctl is-enabled dhcpd &> /dev/null
	[ $? -eq 1 ] && true || false
	check-conformidade
}

apply-209() {
	systemctl disable dhcpd
}

check-210() {
	echo "-	Comando: systemctl is-enabled slapd" | tee -a $arquivodelog
	echo "-	Resultado: " | tee -a $arquivodelog
	mudacor default

	systemctl is-enabled slapd | tee -a $arquivodelog
	systemctl is-enabled slapd &> /dev/null
	[ $? -eq 1 ] && true || false
	check-conformidade
}

apply-210() {
	systemctl disable slapd
}

check-211() {
	local retorno=0
	echo "-	Comando: systemctl is-enabled nfs" | tee -a $arquivodelog
	echo "-	Resultado: " | tee -a $arquivodelog
	mudacor default

	systemctl is-enabled nfs | tee -a $arquivodelog
	systemctl is-enabled nfs &> /dev/null
	[ $? -eq 1 ] && true || ((retorno++))

	mudacor ciano
	echo "-	Comando: systemctl is-enabled rpcbind" | tee -a $arquivodelog
	echo "-	Resultado: " | tee -a $arquivodelog
	mudacor default

	systemctl is-enabled rpcbind | tee -a $arquivodelog
	systemctl is-enabled rpcbind &> /dev/null
	[ $? -eq 1 ] && true || ((retorno++))

	[ $retorno -eq 0 ] && true || false
	check-conformidade
}

apply-211() {
	systemctl disable nfs
	systemctl disable rpcbind
}

check-212() {
	echo "-	Comando: systemctl is-enabled named" | tee -a $arquivodelog
	echo "-	Resultado: " | tee -a $arquivodelog
	mudacor default

	systemctl is-enabled named | tee -a $arquivodelog
	systemctl is-enabled named &> /dev/null
	[ $? -eq 1 ] && true || false
	check-conformidade
}

apply-212() {
	systemctl disable named
}

check-213() {
	echo "-	Comando: systemctl is-enabled vsftpd" | tee -a $arquivodelog
	echo "-	Resultado: " | tee -a $arquivodelog
	mudacor default

	systemctl is-enabled vsftpd | tee -a $arquivodelog
	systemctl is-enabled vsftpd &> /dev/null
	[ $? -eq 1 ] && true || false
	check-conformidade
}

apply-213() {
	systemctl disable vsftpd
}

check-214() {
	echo "-	Comando: systemctl is-enabled httpd" | tee -a $arquivodelog
	echo "-	Resultado: " | tee -a $arquivodelog
	mudacor default

	systemctl is-enabled httpd | tee -a $arquivodelog
	systemctl is-enabled httpd &> /dev/null
	[ $? -eq 1 ] && true || false
	check-conformidade
}

apply-214() {
	systemctl disable httpd
}

check-215() {
	echo "-	Comando: systemctl is-enabled dovecot" | tee -a $arquivodelog
	echo "-	Resultado: " | tee -a $arquivodelog
	mudacor default

	systemctl is-enabled dovecot | tee -a $arquivodelog
	systemctl is-enabled dovecot &> /dev/null
	[ $? -eq 1 ] && true || false
	check-conformidade
}

apply-215() {
	systemctl disable dovecot
}

check-216() {
	echo "-	Comando: systemctl is-enabled smb" | tee -a $arquivodelog
	echo "-	Resultado: " | tee -a $arquivodelog
	mudacor default

	systemctl is-enabled smb | tee -a $arquivodelog
	systemctl is-enabled smb &> /dev/null
	[ $? -eq 1 ] && true || false
	check-conformidade
}

apply-216() {
	systemctl disable smb
}

check-217() {
	echo "-	Comando: systemctl is-enabled squid" | tee -a $arquivodelog
	echo "-	Resultado: " | tee -a $arquivodelog
	mudacor default

	systemctl is-enabled squid | tee -a $arquivodelog
	systemctl is-enabled squid &> /dev/null
	[ $? -eq 1 ] && true || false
	check-conformidade
}

apply-217() {
	systemctl disable squid
}

check-218() {
	echo "-	Comando: systemctl is-enabled tftp" | tee -a $arquivodelog
	echo "-	Resultado: " | tee -a $arquivodelog
	mudacor default

	systemctl is-enabled tftp | tee -a $arquivodelog
	systemctl is-enabled tftp &> /dev/null
	[ $? -eq 1 ] && true || false
	check-conformidade
}

apply-218() {
	systemctl disable tftp
}

check-219() {
	echo "-	Comando: modprobe -c | grep ipv6 | grep disable" | tee -a $arquivodelog
	echo "-	Resultado: " | tee -a $arquivodelog
	mudacor default

	modprobe -c | grep ipv6 | grep disable | tee -a $arquivodelog
	modprobe -c | grep ipv6 | grep disable &> /dev/null
	check-conformidade
}

apply-219() {
	touch /etc/modprobe.d/disable-ipv6.conf
	echo "options ipv6 disable=1" > /etc/modprobe.d/disable-ipv6.conf
	
	cp /etc/sysctl.conf /etc/sysctl.conf.bak-$curitem-$(date +%Y%m%d-%H%M%S)

	if grep -q "net.ipv6.conf.all.disable_ipv6" /etc/sysctl.conf
	then
		sed -i -e 's/net.ipv6.conf.all.disable_ipv6.*/net.ipv6.conf.all.disable_ipv6 = 1/g' /etc/sysctl.conf
	else
		echo "net.ipv6.conf.all.disable_ipv6 = 1" >> /etc/sysctl.conf
	fi

	if grep -q "net.ipv6.conf.default.disable_ipv6" /etc/sysctl.conf
	then
		sed -i -e 's/net.ipv6.conf.default.disable_ipv6.*/net.ipv6.conf.default.disable_ipv6 = 1/g' /etc/sysctl.conf
	else
		echo "net.ipv6.conf.default.disable_ipv6 = 1" >> /etc/sysctl.conf
	fi

	sysctl -p
}

check-220() {
	echo "-	Comando: systemctl is-enabled auditd" | tee -a $arquivodelog
	echo "-	Resultado: " | tee -a $arquivodelog
	mudacor default

	systemctl is-enabled auditd | tee -a $arquivodelog
	systemctl is-enabled auditd &> /dev/null
	check-conformidade
}

apply-220() {
	yum install auditd -y &> /dev/null
	systemctl enable auditd
}

## 03 - Requisitos de senha

check-301() {
	local retorno=0
	echo "-	Comando: cat /etc/pam.d/password-auth" | tee -a $arquivodelog
	echo "-	Resultado: " | tee -a $arquivodelog
	mudacor default

	cat /etc/pam.d/password-auth | tee -a $arquivodelog

	egrep -q "^auth\s+required\s+pam_env.so" /etc/pam.d/password-auth && true || ((retorno++))
	egrep -q "^auth\s+required\s+pam_faillock.so\s+preauth\s+audit\s+silent\s+deny=3\s+unlock_time=900" /etc/pam.d/password-auth && true || ((retorno++))
	egrep -q "^auth\s+\[success=1\s+default=bad\]\s+pam_unix.so" /etc/pam.d/password-auth && true || ((retorno++))
	egrep -q "^auth\s+\[default=die\]\s+pam_faillock.so\s+authfail\s+audit\s+deny=3\s+unlock_time=900" /etc/pam.d/password-auth && true || ((retorno++))
	egrep -q "^auth\s+sufficient\s+pam_faillock.so\s+authsucc\s+audit\s+deny=3\s+unlock_time=900" /etc/pam.d/password-auth && true || ((retorno++))
	egrep -q "^auth\s+required\s+pam_deny.so" /etc/pam.d/password-auth && true || ((retorno++))

	[ $retorno -eq 0 ] && true || false
	check-warning
}

apply-301() {
	echo " - Edite o arquivo /etc/pam.d/password-auth"
	echo "   Altere os campos 'auth' para os descritos abaixo:"
	echo 
	echo "#%PAM-1.0"
	echo "# This file is auto-generated."
	echo "# User changes will be destroyed the next time authconfig is run."
	echo "auth required pam_env.so"
	echo "auth required pam_faillock.so preauth audit silent deny=3 unlock_time=900"
	echo "auth [success=1 default=bad] pam_unix.so"
	echo "auth [default=die] pam_faillock.so authfail audit deny=3 unlock_time=900"
	echo "auth sufficient pam_faillock.so authsucc audit deny=3 unlock_time=900"
	echo "auth required pam_deny.so"
	echo
}

check-302() {
	echo "-	Comando: egrep '^password\s+sufficient\s+pam_unix.so' /etc/pam.d/password-auth" | tee -a $arquivodelog
	echo "-	Resultado: " | tee -a $arquivodelog
	mudacor default

	egrep '^password\s+sufficient\s+pam_unix.so' /etc/pam.d/password-auth | tee -a $arquivodelog
	egrep -q '^password\s+sufficient\s+pam_unix.so' /etc/pam.d/password-auth
	check-conformidade
}

apply-302() {
	echo " - Edite o arquivo /etc/pam.d/password-auth"
	echo "   Altere o campo 'password' para o descrito abaixo:"
	echo 
	echo "password    sufficient    pam_unix.so sha512 shadow nullok try_first_pass use_authtok"
	echo
}

check-303() {
	echo "-	Comando: egrep -v "^\+" /etc/passwd | awk -F: '($1!="root" && $1!="sync" && $1!="shutdown" && $1!="halt" && $3<1000 && $7!="/sbin/nologin" && $7!="/bin/false")  {print}'" | tee -a $arquivodelog
	echo "-	Resultado: " | tee -a $arquivodelog
	mudacor default

	egrep -v "^\+" /etc/passwd | awk -F: '($1!="root" && $1!="sync" && $1!="shutdown" && $1!="halt" && $3<1000 && $7!="/sbin/nologin" && $7!="/bin/false")  {print}' | tee -a $arquivodelog
	[ $(egrep -v "^\+" /etc/passwd | awk -F: '($1!="root" && $1!="sync" && $1!="shutdown" && $1!="halt" && $3<1000 && $7!="/sbin/nologin" && $7!="/bin/false")  {print}' | wc -l) -eq 0 ] && true || false
	check-conformidade
}

apply-303() {
	echo "Checar contas justificadas na matriz de acesso"
}

check-304() {
	echo '-	Comando: stat /etc/passwd | grep "Access\|Uid"' | tee -a $arquivodelog
	echo "-	Resultado: " | tee -a $arquivodelog
	mudacor default

	stat /etc/passwd | grep "Access\|Uid" | tee -a $arquivodelog
	stat /etc/passwd | grep "Access\|Uid" | grep -q "Access: (0644/-rw-r--r--)  Uid: (    0/    root)   Gid: (    0/    root)"
	check-conformidade
}

apply-304() {
	chmod 644 /etc/passwd
	chown root.root /etc/passwd
}

check-305() {
	echo '-	Comando: stat /etc/group | grep "Access\|Uid"' | tee -a $arquivodelog
	echo "-	Resultado: " | tee -a $arquivodelog
	mudacor default

	stat /etc/group | grep "Access\|Uid" | tee -a $arquivodelog
	stat /etc/group | grep "Access\|Uid" | grep -q "Access: (0644/-rw-r--r--)  Uid: (    0/    root)   Gid: (    0/    root)"
	check-conformidade
}

apply-305() {
	chmod 644 /etc/group
	chown root.root /etc/group
}

check-306() {
	echo '-	Comando: stat /etc/shadow | grep "Access\|Uid"' | tee -a $arquivodelog
	echo "-	Resultado: " | tee -a $arquivodelog
	mudacor default

	stat /etc/shadow | grep "Access\|Uid" | tee -a $arquivodelog
	stat /etc/shadow | grep "Access\|Uid" | grep -q "Access: (0000/----------)  Uid: (    0/    root)   Gid: (    0/    root)"
	check-conformidade
}

apply-306() {
	chmod 000 /etc/shadow
	chown root.root /etc/shadow
}

check-307() {
	echo '-	Comando: stat /etc/gshadow | grep "Access\|Uid"' | tee -a $arquivodelog
	echo "-	Resultado: " | tee -a $arquivodelog
	mudacor default

	stat /etc/gshadow | grep "Access\|Uid" | tee -a $arquivodelog
	stat /etc/gshadow | grep "Access\|Uid" | grep -q "Access: (0000/----------)  Uid: (    0/    root)   Gid: (    0/    root)"
	check-conformidade
}

apply-307() {
	chmod 000 /etc/gshadow
	chown root.root /etc/gshadow
}

check-308() {
	echo '-	Comando: stat /etc/passwd- | grep "Access\|Uid"' | tee -a $arquivodelog
	echo "-	Resultado: " | tee -a $arquivodelog
	mudacor default

	stat /etc/passwd- | grep "Access\|Uid" | tee -a $arquivodelog
	stat /etc/passwd- | grep "Access\|Uid" | grep -q "Access: (0644/-rw-r--r--)  Uid: (    0/    root)   Gid: (    0/    root)"
	check-conformidade
}

apply-308() {
	chmod 644 /etc/passwd-
	chown root.root /etc/passwd-
}

check-309() {
	echo '-	Comando: stat /etc/shadow- | grep "Access\|Uid"' | tee -a $arquivodelog
	echo "-	Resultado: " | tee -a $arquivodelog
	mudacor default

	stat /etc/shadow- | grep "Access\|Uid" | tee -a $arquivodelog
	stat /etc/shadow- | grep "Access\|Uid" | grep -q "Access: (0000/----------)  Uid: (    0/    root)   Gid: (    0/    root)"
	check-conformidade
}

apply-309() {
	chmod 000 /etc/shadow-
	chown root.root /etc/shadow-
}

check-310() {
	echo '-	Comando: stat /etc/group- | grep "Access\|Uid"' | tee -a $arquivodelog
	echo "-	Resultado: " | tee -a $arquivodelog
	mudacor default

	stat /etc/group- | grep "Access\|Uid" | tee -a $arquivodelog
	stat /etc/group- | grep "Access\|Uid" | grep -q "Access: (0644/-rw-r--r--)  Uid: (    0/    root)   Gid: (    0/    root)"
	check-conformidade
}

apply-310() {
	chmod 644 /etc/group-
	chown root.root /etc/group-
}

check-311() {
	echo '-	Comando: stat /etc/gshadow- | grep "Access\|Uid"' | tee -a $arquivodelog
	echo "-	Resultado: " | tee -a $arquivodelog
	mudacor default

	stat /etc/gshadow- | grep "Access\|Uid" | tee -a $arquivodelog
	stat /etc/gshadow- | grep "Access\|Uid" | grep -q "Access: (0000/----------)  Uid: (    0/    root)   Gid: (    0/    root)"
	check-conformidade
}

apply-311() {
	chmod 000 /etc/gshadow-
	chown root.root /etc/gshadow-
}

check-312() {
	echo '-	Comando: for i in $(getent  passwd | awk -F":" '{print $6}') ; do stat $i | grep -i uid; done' | tee -a $arquivodelog
	echo "-	Resultado: " | tee -a $arquivodelog
	mudacor default

	for i in $(getent  passwd | awk -F":" '{print $6}') ; do stat $i | grep -i uid; done | tee -a $arquivodelog
	false
	check-warning
}

apply-312() {
	echo "Resolva as pendencias abaixo:"
	for i in $(getent  passwd | awk -F":" '{print $6}') ; do stat $i | grep -i uid; done | tee -a $arquivodelog
	echo 
	echo "Permissões devem ser 750 ou mais restritivas."
}

check-313() {
	echo '-	Comando: Script customizado' | tee -a $arquivodelog
	echo "-	Resultado: " | tee -a $arquivodelog
	mudacor default

	for dir in `cat /etc/passwd | egrep -v '(root|halt|sync|shutdown)' | awk -F: '($7 != "/sbin/nologin") { print $6 }'`; do
		dirperm=`ls -ld $dir | cut -f1 -d" "`
		if [ `echo $dirperm | cut -c6` != "-" ]; then
			echo "Group Write permission set on directory $dir"
		fi
		if [ `echo $dirperm | cut -c8` != "-" ]; then
			echo "Other Read permission set on directory $dir"
		fi
		if [ `echo $dirperm | cut -c9` != "-" ]; then
			echo "Other Write permission set on directory $dir"
		fi
		if [ `echo $dirperm | cut -c10` != "-" ]; then
			echo "Other Execute permission set on directory $dir"
		fi
	done

	[ $( for dir in `cat /etc/passwd | egrep -v '(root|halt|sync|shutdown)' | awk -F: '($7 != "/sbin/nologin") { print $6 }'`; do
		dirperm=`ls -ld $dir | cut -f1 -d" "`
		if [ `echo $dirperm | cut -c6` != "-" ]; then
			echo "Group Write permission set on directory $dir"
		fi
		if [ `echo $dirperm | cut -c8` != "-" ]; then
			echo "Other Read permission set on directory $dir"
		fi
		if [ `echo $dirperm | cut -c9` != "-" ]; then
			echo "Other Write permission set on directory $dir"
		fi
		if [ `echo $dirperm | cut -c10` != "-" ]; then
			echo "Other Execute permission set on directory $dir"
		fi
		done | wc -l) -eq 0 ] && true || false
	
	check-conformidade

}

apply-313() {
	echo "Resolva as pendencias abaixo:"
	for dir in `cat /etc/passwd | egrep -v '(root|halt|sync|shutdown)' | awk -F: '($7 != "/sbin/nologin") { print $6 }'`; do
		dirperm=`ls -ld $dir | cut -f1 -d" "`
		if [ `echo $dirperm | cut -c6` != "-" ]; then
			echo "Group Write permission set on directory $dir"
		fi
		if [ `echo $dirperm | cut -c8` != "-" ]; then
			echo "Other Read permission set on directory $dir"
		fi
		if [ `echo $dirperm | cut -c9` != "-" ]; then
			echo "Other Write permission set on directory $dir"
		fi
		if [ `echo $dirperm | cut -c10` != "-" ]; then
			echo "Other Execute permission set on directory $dir"
		fi
	done
	echo
}

check-314() {
	echo '-	Comando: Script customizado' | tee -a $arquivodelog
	echo "-	Resultado: " | tee -a $arquivodelog
	mudacor default

	for i in $(cut -s -d: -f4 /etc/passwd | sort -u ); do
		grep -q -P "^.*?:[^:]*:$i:" /etc/group
		if [ $? -ne 0 ]; then
			echo "Group $i is referenced by /etc/passwd but does not exist in /etc/group"
		fi
	done

	[ $( for i in $(cut -s -d: -f4 /etc/passwd | sort -u ); do
		grep -q -P "^.*?:[^:]*:$i:" /etc/group
		if [ $? -ne 0 ]; then
			echo "Group $i is referenced by /etc/passwd but does not exist in /etc/group"
		fi
		done | wc -l) -eq 0 ] && true || false
	check-conformidade
}

apply-314() {
	echo "Resolva as pendencias abaixo:"
	for i in $(cut -s -d: -f4 /etc/passwd | sort -u ); do
		grep -q -P "^.*?:[^:]*:$i:" /etc/group
		if [ $? -ne 0 ]; then
			echo "Group $i is referenced by /etc/passwd but does not exist in /etc/group"
		fi
	done
	echo
}

check-315() {
	echo '-	Comando: Script customizado' | tee -a $arquivodelog
	echo "-	Resultado: " | tee -a $arquivodelog
	mudacor default

	cat /etc/passwd | cut -f3 -d":" | sort -n | uniq -c | while read x ; do
		[ -z "${x}" ] && break
		set - $x
		if [ $1 -gt 1 ]; then
			users=$(awk -F: '($3 == n) { print $1 }' n=$2 /etc/passwd | xargs)
			echo "Duplicate UID ($2): ${users}"
		fi
	done

	[ $( cat /etc/passwd | cut -f3 -d":" | sort -n | uniq -c | while read x ; do
		[ -z "${x}" ] && break
		set - $x
		if [ $1 -gt 1 ]; then
			users=$(awk -F: '($3 == n) { print $1 }' n=$2 /etc/passwd | xargs)
			echo "Duplicate UID ($2): ${users}"
		fi
		done | wc -l) -eq 0 ] && true || false
	check-conformidade
}

apply-315() {
	echo "Resolva as pendencias abaixo:"
	cat /etc/passwd | cut -f3 -d":" | sort -n | uniq -c | while read x ; do
		[ -z "${x}" ] && break
		set - $x
		if [ $1 -gt 1 ]; then
			users=$(awk -F: '($3 == n) { print $1 }' n=$2 /etc/passwd | xargs)
			echo "Duplicate UID ($2): ${users}"
		fi
	done
	echo
}

check-316() {
	echo '-	Comando: Script customizado' | tee -a $arquivodelog
	echo "-	Resultado: " | tee -a $arquivodelog
	mudacor default

	cat /etc/group | cut -f3 -d":" | sort -n | uniq -c | while read x ; do
		[ -z "${x}" ] && break
		set - $x
		if [ $1 -gt 1 ]; then
			groups=$(awk -F: '($3 == n) { print$1}' n=$2 /etc/group | xargs)
			echo "Duplicate GID ($2): ${groups}"
		fi
	done

	[ $( cat /etc/group | cut -f3 -d":" | sort -n | uniq -c | while read x ; do
		[ -z "${x}" ] && break
		set - $x
		if [ $1 -gt 1 ]; then
			groups=$(awk -F: '($3 == n) { print$1}' n=$2 /etc/group | xargs)
			echo "Duplicate GID ($2): ${groups}"
		fi
		done | wc -l) -eq 0 ] && true || false
	check-conformidade
}

apply-316() {
	echo "Resolva as pendencias abaixo:"
	cat /etc/group | cut -f3 -d":" | sort -n | uniq -c | while read x ; do
		[ -z "${x}" ] && break
		set - $x
		if [ $1 -gt 1 ]; then
			groups=$(awk -F: '($3 == n) { print$1}' n=$2 /etc/group | xargs)
			echo "Duplicate GID ($2): ${groups}"
		fi
	done
	echo
}

check-317() {
	echo '-	Comando: Script customizado' | tee -a $arquivodelog
	echo "-	Resultado: " | tee -a $arquivodelog
	mudacor default

	cat /etc/passwd | cut -f1 -d":" |sort -n | uniq -c | while read x ; do
		[ -z "${x}" ] && break
		set - $x
		if [ $1 -gt 1 ]; then
			uids=$(awk -F: '($1 == n) { print $3}' n=$2 /etc/passwd | xargs)
			echo "Duplicate User Name ($2):${uids}"
		fi
	done

	[ $( cat /etc/passwd | cut -f1 -d":" |sort -n | uniq -c | while read x ; do
		[ -z "${x}" ] && break
		set - $x
		if [ $1 -gt 1 ]; then
			uids=$(awk -F: '($1 == n) { print $3}' n=$2 /etc/passwd | xargs)
			echo "Duplicate User Name ($2):${uids}"
		fi
		done | wc -l) -eq 0 ] && true || false
	check-conformidade
}

apply-317() {
	echo "Resolva as pendencias abaixo:"
	cat /etc/passwd | cut -f1 -d":" |sort -n | uniq -c | while read x ; do
		[ -z "${x}" ] && break
		set - $x
		if [ $1 -gt 1 ]; then
			uids=$(awk -F: '($1 == n) { print $3}' n=$2 /etc/passwd | xargs)
			echo "Duplicate User Name ($2):${uids}"
		fi
	done
	echo
}

check-318() {
	echo '-	Comando: Script customizado' | tee -a $arquivodelog
	echo "-	Resultado: " | tee -a $arquivodelog
	mudacor default

	cat /etc/group | cut -f1 -d":" | sort -n | uniq -c | while read x ; do
		[ -z "${x}" ] && break
		set - $x
		if [ $1 -gt 1 ]; then
			gids=$(gawk -F: '($1 == n) { print $3}' n=$2 /etc/group | xargs)
			echo "Duplicate Group Name ($2):${gids}"
		fi
	done

	[ $( cat /etc/group | cut -f1 -d":" | sort -n | uniq -c | while read x ; do
		[ -z "${x}" ] && break
		set - $x
		if [ $1 -gt 1 ]; then
			gids=$(gawk -F: '($1 == n) { print $3}' n=$2 /etc/group | xargs)
			echo "Duplicate Group Name ($2):${gids}"
		fi
		done | wc -l) -eq 0 ] && true || false
	check-conformidade
}

apply-318() {
	echo "Resolva as pendencias abaixo:"
	cat /etc/group | cut -f1 -d":" | sort -n | uniq -c | while read x ; do
		[ -z "${x}" ] && break
		set - $x
		if [ $1 -gt 1 ]; then
			gids=$(gawk -F: '($1 == n) { print $3}' n=$2 /etc/group | xargs)
			echo "Duplicate Group Name ($2):${gids}"
		fi
	done
	echo
}

## 04 - Configuração de SSH

check-401() {
	echo '-	Comando: grep -i protocol /etc/ssh/sshd_config' | tee -a $arquivodelog
	echo "-	Resultado: " | tee -a $arquivodelog
	mudacor default

	grep -i protocol /etc/ssh/sshd_config | tee -a $arquivodelog
	egrep -q "^Protocol 2" /etc/ssh/sshd_config
	check-conformidade
}

apply-401() {
	cp /etc/ssh/sshd_config /etc/ssh/sshd_config-$curitem-$(date +%Y%m%d-%H%M%S)
	if egrep -q "^Protocol 2" /etc/ssh/sshd_config
	then
		sed -i -e '/.*Protocol.*/d' /etc/ssh/sshd_config
		echo "Protocol 2" >> /etc/ssh/sshd_config
	else
		echo "Protocol 2" >> /etc/ssh/sshd_config
	fi
}

check-402() {
	echo '-	Comando: grep LogLevel /etc/ssh/sshd_config' | tee -a $arquivodelog
	echo "-	Resultado: " | tee -a $arquivodelog
	mudacor default

	grep LogLevel /etc/ssh/sshd_config | tee -a $arquivodelog
	egrep -q "^LogLevel INFO" /etc/ssh/sshd_config
	check-conformidade
}

apply-402() {
	cp /etc/ssh/sshd_config /etc/ssh/sshd_config-$curitem-$(date +%Y%m%d-%H%M%S)
	if egrep -q "^LogLevel INFO" /etc/ssh/sshd_config
	then
		sed -i -e '/.*LogLevel.*/d' /etc/ssh/sshd_config
		echo "LogLevel INFO" >> /etc/ssh/sshd_config
	else
		cp /etc/ssh/sshd_config /etc/ssh/sshd_config
		echo "LogLevel INFO" >> /etc/ssh/sshd_config
	fi
}

check-403() {
	echo '-	Comando: grep X11Forwarding /etc/ssh/sshd_config' | tee -a $arquivodelog
	echo "-	Resultado: " | tee -a $arquivodelog
	mudacor default

	grep X11Forwarding /etc/ssh/sshd_config | tee -a $arquivodelog
	
	check-conformidade
}

apply-403() {
	cp /etc/ssh/sshd_config /etc/ssh/sshd_config-$curitem-$(date +%Y%m%d-%H%M%S)
	if egrep -q "^X11Forwarding no" /etc/ssh/sshd_config
	then
		sed -i -e '/.*X11Forwarding.*/d' /etc/ssh/sshd_config
		echo "X11Forwarding no" >> /etc/ssh/sshd_config
	else
		cp /etc/ssh/sshd_config /etc/ssh/sshd_config
		echo "X11Forwarding no" >> /etc/ssh/sshd_config
	fi
}

check-404() {
	echo '-	Comando: grep MaxAuthTries /etc/ssh/sshd_config' | tee -a $arquivodelog
	echo "-	Resultado: " | tee -a $arquivodelog
	mudacor default

	grep MaxAuthTries /etc/ssh/sshd_config | tee -a $arquivodelog
	egrep -q "^MaxAuthTries 4" /etc/ssh/sshd_config
	check-conformidade
}

apply-404() {
	cp /etc/ssh/sshd_config /etc/ssh/sshd_config-$curitem-$(date +%Y%m%d-%H%M%S)
	if egrep -q "^MaxAuthTries 4" /etc/ssh/sshd_config
	then
		sed -i -e '/.*MaxAuthTries.*/d' /etc/ssh/sshd_config
		echo "MaxAuthTries 4" >> /etc/ssh/sshd_config
	else
		cp /etc/ssh/sshd_config /etc/ssh/sshd_config
		echo "MaxAuthTries 4" >> /etc/ssh/sshd_config
	fi
}

check-405() {
	echo '-	Comando: grep Hostbased /etc/ssh/sshd_config' | tee -a $arquivodelog
	echo "-	Resultado: " | tee -a $arquivodelog
	mudacor default

	grep Hostbased /etc/ssh/sshd_config | tee -a $arquivodelog
	egrep -q "^HostbasedAuthentication no" /etc/ssh/sshd_config
	check-conformidade
}

apply-405() {
	cp /etc/ssh/sshd_config /etc/ssh/sshd_config-$curitem-$(date +%Y%m%d-%H%M%S)
	if egrep -q "^HostbasedAuthentication no" /etc/ssh/sshd_config
	then
		sed -i -e '/.*Hostbased.*/d' /etc/ssh/sshd_config
		echo "HostbasedAuthentication no" >> /etc/ssh/sshd_config
	else
		cp /etc/ssh/sshd_config /etc/ssh/sshd_config
		echo "HostbasedAuthentication no" >> /etc/ssh/sshd_config
	fi
}

check-406() {
	echo '-	Comando: grep PermitRoot /etc/ssh/sshd_config' | tee -a $arquivodelog
	echo "-	Resultado: " | tee -a $arquivodelog
	mudacor default

	grep PermitRoot /etc/ssh/sshd_config | tee -a $arquivodelog
	egrep -q "^PermitRootLogin no" /etc/ssh/sshd_config
	check-conformidade
}

apply-406() {
	cp /etc/ssh/sshd_config /etc/ssh/sshd_config-$curitem-$(date +%Y%m%d-%H%M%S)
	if egrep -q "^PermitRootLogin no" /etc/ssh/sshd_config
	then
		sed -i -e '/.*PermitRoot.*/d' /etc/ssh/sshd_config
		echo "PermitRootLogin no" >> /etc/ssh/sshd_config
	else
		cp /etc/ssh/sshd_config /etc/ssh/sshd_config
		echo "PermitRootLogin no" >> /etc/ssh/sshd_config
	fi
}

check-407() {
	echo '-	Comando: grep PermitEmpty /etc/ssh/sshd_config' | tee -a $arquivodelog
	echo "-	Resultado: " | tee -a $arquivodelog
	mudacor default

	grep PermitEmpty /etc/ssh/sshd_config | tee -a $arquivodelog
	egrep -q "^PermitEmptyPasswords no" /etc/ssh/sshd_config
	check-conformidade
}

apply-407() {
	cp /etc/ssh/sshd_config /etc/ssh/sshd_config-$curitem-$(date +%Y%m%d-%H%M%S)
	if egrep -q "^PermitEmptyPasswords no" /etc/ssh/sshd_config
	then
		sed -i -e '/.*PermitEmpty.*/d' /etc/ssh/sshd_config
		echo "PermitEmptyPasswords no" >> /etc/ssh/sshd_config
	else
		cp /etc/ssh/sshd_config /etc/ssh/sshd_config
		echo "PermitEmptyPasswords no" >> /etc/ssh/sshd_config
	fi
}

check-408() {
	echo '-	Comando: grep PermitUser /etc/ssh/sshd_config' | tee -a $arquivodelog
	echo "-	Resultado: " | tee -a $arquivodelog
	mudacor default

	grep PermitUser /etc/ssh/sshd_config | tee -a $arquivodelog
	egrep -q "^PermitUserEnvironment no" /etc/ssh/sshd_config
	check-conformidade
}

apply-408() {
	cp /etc/ssh/sshd_config /etc/ssh/sshd_config-$curitem-$(date +%Y%m%d-%H%M%S)
	if egrep -q "^PermitUserEnvironment no" /etc/ssh/sshd_config
	then
		sed -i -e '/.*PermitUser.*/d' /etc/ssh/sshd_config
		echo "PermitUserEnvironment no" >> /etc/ssh/sshd_config
	else
		cp /etc/ssh/sshd_config /etc/ssh/sshd_config
		echo "PermitUserEnvironment no" >> /etc/ssh/sshd_config
	fi
}

check-409() {
	echo '-	Comando: grep Ciphers /etc/ssh/sshd_config' | tee -a $arquivodelog
	echo "-	Resultado: " | tee -a $arquivodelog
	mudacor default

	grep Ciphers /etc/ssh/sshd_config | tee -a $arquivodelog
	egrep -q "^Ciphers aes128-ctr,aes192-ctr,aes256-ctr,aes256-cbc" /etc/ssh/sshd_config
	check-conformidade
}

apply-409() {
	cp /etc/ssh/sshd_config /etc/ssh/sshd_config-$curitem-$(date +%Y%m%d-%H%M%S)
	if egrep -q "^Ciphers aes128-ctr,aes192-ctr,aes256-ctr,aes256-cbc" /etc/ssh/sshd_config
	then
		sed -i -e '/.*Ciphers.*/d' /etc/ssh/sshd_config
		echo "Ciphers aes128-ctr,aes192-ctr,aes256-ctr,aes256-cbc" >> /etc/ssh/sshd_config
	else
		cp /etc/ssh/sshd_config /etc/ssh/sshd_config
		echo "Ciphers aes128-ctr,aes192-ctr,aes256-ctr,aes256-cbc" >> /etc/ssh/sshd_config
	fi
}

check-410() {
	echo '-	Comando: grep Banner /etc/ssh/sshd_config' | tee -a $arquivodelog
	echo "-	Resultado: " | tee -a $arquivodelog
	mudacor default

	grep Banner /etc/ssh/sshd_config | tee -a $arquivodelog
	egrep -q "^Banner /etc/issue.net" /etc/ssh/sshd_config
	check-conformidade
}

apply-410() {
	cp /etc/ssh/sshd_config /etc/ssh/sshd_config-$curitem-$(date +%Y%m%d-%H%M%S)
	if egrep -q "^Banner /etc/issue.net" /etc/ssh/sshd_config
	then
		sed -i -e '/.*Banner.*/d' /etc/ssh/sshd_config
		echo "Banner /etc/issue.net" >> /etc/ssh/sshd_config
	else
		cp /etc/ssh/sshd_config /etc/ssh/sshd_config
		echo "Banner /etc/issue.net" >> /etc/ssh/sshd_config
	fi
}

check-411() {
	echo '-	Comando: realm list' | tee -a $arquivodelog
	echo "-	Resultado: " | tee -a $arquivodelog
	mudacor default

	if [ $(which realm &> /dev/null) ]
	then
		realm list | tee -a $arquivodelog
		[ $(realm list | wc -l) -eq 0 ] && true || false
	else
		echo "Comando realm não encontrado no servidor." | tee -a $arquivodelog
		true
	fi
	check-conformidade
}

apply-411() {
	echo "Cheque internamente configurações do sssd para comunicação com o AD."
}

## 05 - Log e auditoria

check-501() {
	local retorno=0
	echo '-	Comando: egrep "^auth,user|^kern|^daemon|^syslog|^lpr" /etc/rsyslog.conf' | tee -a $arquivodelog
	echo "-	Resultado: " | tee -a $arquivodelog
	mudacor default

	egrep "^auth,user|^kern|^daemon|^syslog|^lpr" /etc/rsyslog.conf | tee -a $arquivodelog

	egrep -q "auth,user.*/var/log/messages" /etc/rsyslog.conf && true || ((retorno++))
	egrep -q "kern.*/var/log/kern.log" /etc/rsyslog.conf && true || ((retorno++))
	egrep -q "daemon.*/var/log/daemon.log" /etc/rsyslog.conf && true || ((retorno++))
	egrep -q "syslog.*/var/log/syslog" /etc/rsyslog.conf && true || ((retorno++))
	egrep -q "lpr,news,uucp,local0,local1,local2,local3,local4,local5,local6.*/var/log/unused.log" /etc/rsyslog.conf && true || ((retorno++))

	[ $retorno -eq 0 ] && true || false
	check-warning
}

apply-501() {
	echo "Garanta que o arquivo /etc/rsyslog.conf possua as linhas abaixo:"
	echo "auth,user.* /var/log/messages"
	echo "kern.* /var/log/kern.log"
	echo "daemon.* /var/log/daemon.log"
	echo "syslog.* /var/log/syslog"
	echo "lpr,news,uucp,local0,local1,local2,local3,local4,local5,local6.* /var/log/unused.log"
	echo
}

#check-502() {
#	Configure rsyslog to Send Logs to a Remote Log Host
#}
#
#apply-502() {
#	
#}

check-503() {
	echo "-	Comando: systemctl is-enabled rsyslog" | tee -a $arquivodelog
	echo "-	Resultado: " | tee -a $arquivodelog
	mudacor default

	systemctl is-enabled rsyslog | tee -a $arquivodelog
	systemctl is-enabled rsyslog &> /dev/null
	check-conformidade
}

apply-503() {
	systemctl enable rsyslogd
}

check-504() {
	echo '-	Comando: grep "MAC-policy" /etc/audit/rules.d/audit.rules' | tee -a $arquivodelog
	echo "-	Resultado: " | tee -a $arquivodelog
	mudacor default

	grep "MAC-policy" /etc/audit/rules.d/audit.rules | tee -a $arquivodelog
	egrep -q "\-w /etc/selinux/ \-p wa \-k MAC-policy" /etc/audit/rules.d/audit.rules && true || false
	check-conformidade
}

apply-504() {
	echo "Verifique o arquivo /etc/audit/rules.d/audit.rules para inserir a linha abaixo:"
	echo "-w /etc/selinux/ -p wa -k MAC-policy"
	echo
}

check-505() {
	local retorno=0
	echo "-	Comando: grep faillog /etc/audit/rules.d/audit.rules" | tee -a $arquivodelog
	echo "-	Resultado: " | tee -a $arquivodelog
	mudacor default

	grep faillog /etc/audit/rules.d/audit.rules | tee -a $arquivodelog
	egrep -q "\-w /var/log/faillog \-p wa \-k logins" /etc/audit/rules.d/audit.rules && true || ((retorno++))

	mudacor ciano
	echo "-	Comando: grep tallylog /etc/audit/rules.d/audit.rules" | tee -a $arquivodelog
	echo "-	Resultado: " | tee -a $arquivodelog
	mudacor default

	grep tallylog /etc/audit/rules.d/audit.rules | tee -a $arquivodelog
	egrep -q "\-w /var/log/tallylog \-p wa \-k logins" /etc/audit/rules.d/audit.rules && true || ((retorno++))

	mudacor ciano
	echo "-	Comando: grep lastlog /etc/audit/rules.d/audit.rules" | tee -a $arquivodelog
	echo "-	Resultado: " | tee -a $arquivodelog
	mudacor default

	grep lastlog /etc/audit/rules.d/audit.rules | tee -a $arquivodelog
	egrep -q "\-w /var/log/lastlog \-p wa \-k logins" /etc/audit/rules.d/audit.rules && true || ((retorno++))

	[ $retorno -eq 0 ] && true || false
	check-warning
}

apply-505() {
	echo "Verifique o arquivo /etc/audit/rules.d/audit.rules para inserir as linhas abaixo:"
	echo "-w /var/log/faillog -p wa -k logins"
	echo "-w /var/log/lastlog -p wa -k logins"
	echo "-w /var/log/tallylog -p wa -k logins"
	echo
}

check-506() {
	local retorno=0
	echo "-	Comando: grep utmp /etc/audit/rules.d/audit.rules" | tee -a $arquivodelog
	echo "-	Resultado: " | tee -a $arquivodelog
	mudacor default

	grep utmp /etc/audit/rules.d/audit.rules | tee -a $arquivodelog
	egrep -q "\-w /var/run/utmp \-p wa \-k session" /etc/audit/rules.d/audit.rules && true || ((retorno++))

	mudacor ciano
	echo "-	Comando: grep btmp /etc/audit/rules.d/audit.rules" | tee -a $arquivodelog
	echo "-	Resultado: " | tee -a $arquivodelog
	mudacor default

	grep btmp /etc/audit/rules.d/audit.rules | tee -a $arquivodelog
	egrep -q "\-w /var/log/btmp \-p wa \-k session" /etc/audit/rules.d/audit.rules && true || ((retorno++))

	mudacor ciano
	echo "-	Comando: grep wtmp /etc/audit/rules.d/audit.rules" | tee -a $arquivodelog
	echo "-	Resultado: " | tee -a $arquivodelog
	mudacor default

	grep wtmp /etc/audit/rules.d/audit.rules | tee -a $arquivodelog
	egrep -q "\-w /var/log/wtmp \-p wa \-k session" /etc/audit/rules.d/audit.rules && true || ((retorno++))

	[ $retorno -eq 0 ] && true || false
	check-warning
}

apply-506() {
	echo "Verifique o arquivo /etc/audit/rules.d/audit.rules para inserir as linhas abaixo:"
	echo "-w /var/run/utmp -p wa -k session"
	echo "-w /var/log/wtmp -p wa -k session"
	echo "-w /var/log/btmp -p wa -k session"
	echo
}

check-507() {
	local retorno=0
	echo '-	Comando: egrep "fchmod|fchmodat|lremovexattr" /etc/audit/rules.d/audit.rules' | tee -a $arquivodelog
	echo "-	Resultado: " | tee -a $arquivodelog
	mudacor default

	egrep "fchmod|fchmodat|lremovexattr" /etc/audit/rules.d/audit.rules | tee -a $arquivodelog

	egrep -q "\-a always,exit \-F arch=b64 \-S chmod \-S fchmod \-S fchmodat \-F auid>=500 \-F auid!=4294967295 \-k perm_mod" /etc/audit/rules.d/audit.rules && true || ((retorno++))
	egrep -q "\-a always,exit \-F arch=b32 \-S chmod \-S fchmod \-S fchmodat \-F auid>=500 \-F auid!=4294967295 \-k perm_mod" /etc/audit/rules.d/audit.rules && true || ((retorno++))
	egrep -q "\-a always,exit \-F arch=b64 \-S chown \-S fchown \-S fchownat \-S lchown \-F auid>=500  \-F auid!=4294967295 \-k perm_mod" /etc/audit/rules.d/audit.rules && true || ((retorno++))
	egrep -q "\-a always,exit \-F arch=b32 \-S chown \-S fchown \-S fchownat \-S lchown \-F auid>=500 \-F auid!=4294967295 \-k perm_mod" /etc/audit/rules.d/audit.rules && true || ((retorno++))
	egrep -q "\-a always,exit \-F arch=b64 \-S setxattr \-S lsetxattr \-S fsetxattr \-S removexattr \-S lremovexattr \-S fremovexattr \-F auid>=500 \-F auid!=4294967295 \-k perm_mod" /etc/audit/rules.d/audit.rules && true || ((retorno++))
	egrep -q "\-a always,exit \-F arch=b32 \-S setxattr \-S lsetxattr \-S fsetxattr \-S removexattr \-S lremovexattr \-S fremovexattr" /etc/audit/rules.d/audit.rules && true || ((retorno++))

	[ $retorno -eq 0 ] && true || false
	check-warning
}

apply-507() {
	echo "Verifique o arquivo /etc/audit/rules.d/audit.rules para inserir as linhas abaixo:"
	echo "-a always,exit -F arch=b64 -S chmod -S fchmod -S fchmodat -F auid>=500 -F auid!=4294967295 -k perm_mod"
	echo "-a always,exit -F arch=b32 -S chmod -S fchmod -S fchmodat -F auid>=500 -F auid!=4294967295 -k perm_mod"
	echo "-a always,exit -F arch=b64 -S chown -S fchown -S fchownat -S lchown -F auid>=500  -F auid!=4294967295 -k perm_mod"
	echo "-a always,exit -F arch=b32 -S chown -S fchown -S fchownat -S lchown -F auid>=500 -F auid!=4294967295 -k perm_mod"
	echo "-a always,exit -F arch=b64 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid>=500 -F auid!=4294967295 -k perm_mod"
	echo "-a always,exit -F arch=b32 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr"
	echo
}

check-508() {
	local retorno=0
	echo '-	Comando: egrep "openat|truncate|EACCES" /etc/audit/rules.d/audit.rules' | tee -a $arquivodelog
	echo "-	Resultado: " | tee -a $arquivodelog
	mudacor default

	egrep "openat|truncate|EACCES" /etc/audit/rules.d/audit.rules | tee -a $arquivodelog

	egrep -q "\-a always,exit \-F arch=b64 \-S creat \-S open \-S openat \-S truncate \-S ftruncate \-F exit=\-EACCES \-F auid>=500 \-F auid!=4294967295 \-k access" /etc/audit/rules.d/audit.rules && true || ((retorno++))
	egrep -q "\-a always,exit \-F arch=b32 \-S creat \-S open \-S openat \-S truncate \-S ftruncate \-F exit=\-EACCES \-F auid>=500 \-F auid!=4294967295 \-k access" /etc/audit/rules.d/audit.rules && true || ((retorno++))
	egrep -q "\-a always,exit \-F arch=b64 \-S creat \-S open \-S openat \-S truncate \-S ftruncate \-F exit=\-EPERM \-F auid>=500 \-F auid!=4294967295 \-k access" /etc/audit/rules.d/audit.rules && true || ((retorno++))
	egrep -q "\-a always,exit \-F arch=b32 \-S creat \-S open \-S openat \-S truncate \-S ftruncate" /etc/audit/rules.d/audit.rules && true || ((retorno++))

	[ $retorno -eq 0 ] && true || false
	check-warning
}

apply-508() {
	echo "Verifique o arquivo /etc/audit/rules.d/audit.rules para inserir as linhas abaixo:"
	echo "-a always,exit -F arch=b64 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EACCES -F auid>=500 -F auid!=4294967295 -k access"
	echo "-a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EACCES -F auid>=500 -F auid!=4294967295 -k access"
	echo "-a always,exit -F arch=b64 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EPERM -F auid>=500 -F auid!=4294967295 -k access"
	echo "-a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate"
	echo
}

check-509() {
	local retorno=0
	echo '-	Comando: egrep "mounts|mount|always" /etc/audit/rules.d/audit.rules' | tee -a $arquivodelog
	echo "-	Resultado: " | tee -a $arquivodelog
	mudacor default

	egrep "mounts|mount|always" /etc/audit/rules.d/audit.rules | tee -a $arquivodelog

	egrep -q "\-a always,exit \-F arch=b64 \-S mount \-F auid>=500 \-F auid!=4294967295 \-k mounts" /etc/audit/rules.d/audit.rules && true || ((retorno++))
	egrep -q "\-a always,exit \-F arch=b32 \-S mount \-F auid>=500 \-F auid!=4294967295 \-k mounts" /etc/audit/rules.d/audit.rules && true || ((retorno++))

	[ $retorno -eq 0 ] && true || false
	check-warning
}

apply-509() {
	echo "Verifique o arquivo /etc/audit/rules.d/audit.rules para inserir as linhas abaixo:"
	echo "-a always,exit -F arch=b64 -S mount -F auid>=500 -F auid!=4294967295 -k mounts"
	echo "-a always,exit -F arch=b32 -S mount -F auid>=500 -F auid!=4294967295 -k mounts"
	echo
}

check-510() {
	echo '-	Comando: grep "scope" /etc/audit/rules.d/audit.rules' | tee -a $arquivodelog
	echo "-	Resultado: " | tee -a $arquivodelog
	mudacor default

	grep "scope" /etc/audit/rules.d/audit.rules | tee -a $arquivodelog
	egrep -q "\-w /etc/sudoers \-p wa \-k scope" /etc/audit/rules.d/audit.rules && true || false
	check-conformidade
}

apply-510() {
	echo "Verifique o arquivo /etc/audit/rules.d/audit.rules para inserir a linha abaixo:"
	echo "-w /etc/sudoers -p wa -k scope"
	echo
}

check-511() {
	echo '-	Comando: grep "actions" /etc/audit/rules.d/audit.rules' | tee -a $arquivodelog
	echo "-	Resultado: " | tee -a $arquivodelog
	mudacor default

	grep "actions" /etc/audit/rules.d/audit.rules | tee -a $arquivodelog
	egrep -q "\-w /var/log/sudo.log \-p wa \-k actions" /etc/audit/rules.d/audit.rules && true || false
	check-conformidade

	grep actions  /etc/audit/rules.d/audit.rules
}

apply-511() {
	echo "Verifique o arquivo /etc/audit/rules.d/audit.rules para inserir as linhas abaixo:"
	echo "-w /var/log/sudo.log -p wa -k actions"
	echo
}

check-512() {
	local retorno=0
	echo '-	Comando: egrep "insmod|modules" /etc/audit/rules.d/audit.rules' | tee -a $arquivodelog
	echo "-	Resultado: " | tee -a $arquivodelog
	mudacor default

	cat /etc/audit/rules.d/audit.rules | tee -a $arquivodelog

	egrep -q "\-w /sbin/insmod \-p x \-k modules" /etc/audit/rules.d/audit.rules && true || ((retorno++))
	egrep -q "\-w /sbin/rmmod \-p x \-k modules" /etc/audit/rules.d/audit.rules && true || ((retorno++))
	egrep -q "\-w /sbin/modprobe \-p x \-k modules" /etc/audit/rules.d/audit.rules && true || ((retorno++))

	[ $retorno -eq 0 ] && true || false
	check-warning
}

apply-512() {
	echo "Verifique o arquivo /etc/audit/rules.d/audit.rules para inserir as linhas abaixo:"
	echo "-w /sbin/insmod -p x -k modules"
	echo "-w /sbin/rmmod -p x -k modules"
	echo "-w /sbin/modprobe -p x -k modules"
	echo
}

check-513() {
	echo '-	Comando: grep "e 2" /etc/audit/rules.d/audit.rules' | tee -a $arquivodelog
	echo "-	Resultado: " | tee -a $arquivodelog
	mudacor default

	grep "e 2" /etc/audit/rules.d/audit.rules | tee -a $arquivodelog
	egrep -q "\-e 2" /etc/audit/rules.d/audit.rules && true || false
	check-conformidade
}

apply-513() {
	echo "Verifique o arquivo /etc/audit/rules.d/audit.rules para inserir as linhas abaixo:"
	echo "-e 2"
	echo
}

## 06 - Configuração de rede

check-601() {
	echo '-	Comando: cat /proc/sys/net/ipv4/tcp_syncookies' | tee -a $arquivodelog
	echo "-	Resultado: " | tee -a $arquivodelog
	mudacor default

	cat /proc/sys/net/ipv4/tcp_syncookies | tee -a $arquivodelog
	cat /proc/sys/net/ipv4/tcp_syncookies | grep -q "1"
	check-conformidade
}

apply-601() {
	cp /etc/sysctl.conf /etc/sysctl.conf.bak-$curitem-$(date +%Y%m%d-%H%M%S)

	if grep -q "net.ipv4.tcp_syncookies" /etc/sysctl.conf
	then
		sed -i -e 's/net.ipv4.tcp_syncookies.*/net.ipv4.tcp_syncookies = 1/g' /etc/sysctl.conf
	else
		echo "net.ipv4.tcp_syncookies = 1" >> /etc/sysctl.conf
	fi

	systemctl -p
}

check-602() {
	echo '-	Comando: cat /proc/sys/net/ipv4/ip_forward' | tee -a $arquivodelog
	echo "-	Resultado: " | tee -a $arquivodelog
	mudacor default

	cat /proc/sys/net/ipv4/ip_forward | tee -a $arquivodelog
	cat /proc/sys/net/ipv4/ip_forward | grep -q "0"
	check-conformidade
}

apply-602() {
	cp /etc/sysctl.conf /etc/sysctl.conf.bak-$curitem-$(date +%Y%m%d-%H%M%S)

	if grep -q "net.ipv4.ip_forward" /etc/sysctl.conf
	then
		sed -i -e 's/net.ipv4.ip_forward.*/net.ipv4.ip_forward = 0/g' /etc/sysctl.conf
	else
		echo "net.ipv4.ip_forward = 0" >> /etc/sysctl.conf
	fi

	systemctl -p
}

check-603() {
	local retorno=0
	echo '-	Comando: sysctl net.ipv4.conf.all.send_redirects' | tee -a $arquivodelog
	echo "-	Resultado: " | tee -a $arquivodelog
	mudacor default

	sysctl net.ipv4.conf.all.send_redirects | tee -a $arquivodelog
	sysctl net.ipv4.conf.all.send_redirects | grep -q "0"
	[ $? -eq 0 ] && true || ((retorno++))

	mudacor ciano
	echo '-	Comando: sysctl net.ipv4.conf.default.send_redirects' | tee -a $arquivodelog
	echo "-	Resultado: " | tee -a $arquivodelog
	mudacor default

	sysctl net.ipv4.conf.default.send_redirects | tee -a $arquivodelog
	sysctl net.ipv4.conf.default.send_redirects | grep -q "0"
	[ $? -eq 0 ] && true || ((retorno++))

	[ $retorno -eq 0 ] && true || false
	check-conformidade
}

apply-603() {
	cp /etc/sysctl.conf /etc/sysctl.conf.bak-$curitem-$(date +%Y%m%d-%H%M%S)

	if grep -q "net.ipv4.conf.all.send_redirects" /etc/sysctl.conf
	then
		sed -i -e 's/net.ipv4.conf.all.send_redirects.*/net.ipv4.conf.all.send_redirects = 0/g' /etc/sysctl.conf
	else
		echo "net.ipv4.conf.all.send_redirects = 0" >> /etc/sysctl.conf
	fi

	if grep -q "net.ipv4.conf.default.send_redirects" /etc/sysctl.conf
	then
		sed -i -e 's/net.ipv4.conf.default.send_redirects.*/net.ipv4.conf.default.send_redirects = 0/g' /etc/sysctl.conf
	else
		echo "net.ipv4.conf.default.send_redirects = 0" >> /etc/sysctl.conf
	fi

	sysctl -p
}

check-604() {
	local retorno=0
	echo '-	Comando: sysctl net.ipv4.conf.all.accept_source_route' | tee -a $arquivodelog
	echo "-	Resultado: " | tee -a $arquivodelog
	mudacor default

	sysctl net.ipv4.conf.all.accept_source_route | tee -a $arquivodelog
	sysctl net.ipv4.conf.all.accept_source_route | grep -q "0"
	[ $? -eq 0 ] && true || ((retorno++))

	mudacor ciano
	echo '-	Comando: sysctl net.ipv4.conf.default.accept_source_route' | tee -a $arquivodelog
	echo "-	Resultado: " | tee -a $arquivodelog
	mudacor default

	sysctl net.ipv4.conf.default.accept_source_route | tee -a $arquivodelog
	sysctl net.ipv4.conf.default.accept_source_route | grep -q "0"
	[ $? -eq 0 ] && true || ((retorno++))

	[ $retorno -eq 0 ] && true || false
	check-conformidade
}

apply-604() {
	cp /etc/sysctl.conf /etc/sysctl.conf.bak-$curitem-$(date +%Y%m%d-%H%M%S)

	if grep -q "net.ipv4.conf.all.accept_source_route" /etc/sysctl.conf
	then
		sed -i -e 's/net.ipv4.conf.all.accept_source_route.*/net.ipv4.conf.all.accept_source_route = 0/g' /etc/sysctl.conf
	else
		echo "net.ipv4.conf.all.accept_source_route = 0" >> /etc/sysctl.conf
	fi

	if grep -q "net.ipv4.conf.default.accept_source_route" /etc/sysctl.conf
	then
		sed -i -e 's/net.ipv4.conf.default.accept_source_route.*/net.ipv4.conf.default.accept_source_route = 0/g' /etc/sysctl.conf
	else
		echo "net.ipv4.conf.default.accept_source_route = 0" >> /etc/sysctl.conf
	fi

	sysctl -p
}

check-605() {
	local retorno=0
	echo '-	Comando: sysctl net.ipv4.conf.all.accept_redirects' | tee -a $arquivodelog
	echo "-	Resultado: " | tee -a $arquivodelog
	mudacor default

	sysctl net.ipv4.conf.all.accept_redirects | tee -a $arquivodelog
	sysctl net.ipv4.conf.all.accept_redirects | grep -q "0"
	[ $? -eq 0 ] && true || ((retorno++))

	mudacor ciano
	echo '-	Comando: sysctl net.ipv4.conf.default.accept_redirects' | tee -a $arquivodelog
	echo "-	Resultado: " | tee -a $arquivodelog
	mudacor default

	sysctl net.ipv4.conf.default.accept_redirects | tee -a $arquivodelog
	sysctl net.ipv4.conf.default.accept_redirects | grep -q "0"
	[ $? -eq 0 ] && true || ((retorno++))

	[ $retorno -eq 0 ] && true || false
	check-conformidade
}

apply-605() {
	cp /etc/sysctl.conf /etc/sysctl.conf.bak-$curitem-$(date +%Y%m%d-%H%M%S)

	if grep -q "net.ipv4.conf.all.accept_redirects" /etc/sysctl.conf
	then
		sed -i -e 's/net.ipv4.conf.all.accept_redirects.*/net.ipv4.conf.all.accept_redirects = 0/g' /etc/sysctl.conf
	else
		echo "net.ipv4.conf.all.accept_redirects = 0" >> /etc/sysctl.conf
	fi

	if grep -q "net.ipv4.conf.default.accept_redirects" /etc/sysctl.conf
	then
		sed -i -e 's/net.ipv4.conf.default.accept_redirects.*/net.ipv4.conf.default.accept_redirects = 0/g' /etc/sysctl.conf
	else
		echo "net.ipv4.conf.default.accept_redirects = 0" >> /etc/sysctl.conf
	fi

	sysctl -p
}

check-606() {
	local retorno=0
	echo '-	Comando: sysctl net.ipv4.conf.all.secure_redirects' | tee -a $arquivodelog
	echo "-	Resultado: " | tee -a $arquivodelog
	mudacor default

	sysctl net.ipv4.conf.all.secure_redirects | tee -a $arquivodelog
	sysctl net.ipv4.conf.all.secure_redirects | grep -q "0"
	[ $? -eq 0 ] && true || ((retorno++))

	mudacor ciano
	echo '-	Comando: sysctl net.ipv4.conf.default.secure_redirects' | tee -a $arquivodelog
	echo "-	Resultado: " | tee -a $arquivodelog
	mudacor default

	sysctl net.ipv4.conf.default.secure_redirects | tee -a $arquivodelog
	sysctl net.ipv4.conf.default.secure_redirects | grep -q "0"
	[ $? -eq 0 ] && true || ((retorno++))

	[ $retorno -eq 0 ] && true || false
	check-conformidade
}

apply-606() {
	cp /etc/sysctl.conf /etc/sysctl.conf.bak-$curitem-$(date +%Y%m%d-%H%M%S)

	if grep -q "net.ipv4.conf.all.secure_redirects" /etc/sysctl.conf
	then
		sed -i -e 's/net.ipv4.conf.all.secure_redirects.*/net.ipv4.conf.all.secure_redirects = 0/g' /etc/sysctl.conf
	else
		echo "net.ipv4.conf.all.secure_redirects = 0" >> /etc/sysctl.conf
	fi

	if grep -q "net.ipv4.conf.default.secure_redirects" /etc/sysctl.conf
	then
		sed -i -e 's/net.ipv4.conf.default.secure_redirects.*/net.ipv4.conf.default.secure_redirects = 0/g' /etc/sysctl.conf
	else
		echo "net.ipv4.conf.default.secure_redirects = 0" >> /etc/sysctl.conf
	fi

	sysctl -p
}

check-607() {
	echo '-	Comando: sysctl net.ipv4.icmp_echo_ignore_broadcasts' | tee -a $arquivodelog
	echo "-	Resultado: " | tee -a $arquivodelog
	mudacor default

	sysctl net.ipv4.icmp_echo_ignore_broadcasts | tee -a $arquivodelog
	sysctl net.ipv4.icmp_echo_ignore_broadcasts | grep -q "1"
	check-conformidade
}

apply-607() {
	cp /etc/sysctl.conf /etc/sysctl.conf.bak-$curitem-$(date +%Y%m%d-%H%M%S)

	if grep -q "net.ipv4.icmp_echo_ignore_broadcasts" /etc/sysctl.conf
	then
		sed -i -e 's/net.ipv4.icmp_echo_ignore_broadcasts.*/net.ipv4.icmp_echo_ignore_broadcasts = 1/g' /etc/sysctl.conf
	else
		echo "net.ipv4.icmp_echo_ignore_broadcasts = 1" >> /etc/sysctl.conf
	fi

	sysctl -p
}

check-608() {
	echo '-	Comando: sysctl net.ipv4.icmp_ignore_bogus_error_responses' | tee -a $arquivodelog
	echo "-	Resultado: " | tee -a $arquivodelog
	mudacor default

	sysctl net.ipv4.icmp_ignore_bogus_error_responses | tee -a $arquivodelog
	sysctl net.ipv4.icmp_ignore_bogus_error_responses | grep -q "1"
	check-conformidade
}

apply-608() {
	cp /etc/sysctl.conf /etc/sysctl.conf.bak-$curitem-$(date +%Y%m%d-%H%M%S)

	if grep -q "net.ipv4.icmp_ignore_bogus_error_responses" /etc/sysctl.conf
	then
		sed -i -e 's/net.ipv4.icmp_ignore_bogus_error_responses.*/net.ipv4.icmp_ignore_bogus_error_responses = 1/g' /etc/sysctl.conf
	else
		echo "net.ipv4.icmp_ignore_bogus_error_responses = 1" >> /etc/sysctl.conf
	fi

	sysctl -p
}

check-609() {
	local retorno=0
	echo '-	Comando: sysctl net.ipv4.conf.all.rp_filter' | tee -a $arquivodelog
	echo "-	Resultado: " | tee -a $arquivodelog
	mudacor default

	sysctl net.ipv4.conf.all.rp_filter | tee -a $arquivodelog
	sysctl net.ipv4.conf.all.rp_filter | grep -q "1"
	[ $? -eq 0 ] && true || ((retorno++))

	mudacor ciano
	echo '-	Comando: sysctl net.ipv4.conf.default.rp_filter' | tee -a $arquivodelog
	echo "-	Resultado: " | tee -a $arquivodelog
	mudacor default

	sysctl net.ipv4.conf.default.rp_filter | tee -a $arquivodelog
	sysctl net.ipv4.conf.default.rp_filter | grep -q "1"
	[ $? -eq 0 ] && true || ((retorno++))

	[ $retorno -eq 0 ] && true || false
	check-conformidade
}

apply-609() {
	cp /etc/sysctl.conf /etc/sysctl.conf.bak-$curitem-$(date +%Y%m%d-%H%M%S)

	if grep -q "net.ipv4.conf.all.rp_filter" /etc/sysctl.conf
	then
		sed -i -e 's/net.ipv4.conf.all.rp_filter.*/net.ipv4.conf.all.rp_filter = 1/g' /etc/sysctl.conf
	else
		echo "net.ipv4.conf.all.rp_filter = 1" >> /etc/sysctl.conf
	fi

	if grep -q "net.ipv4.conf.default.rp_filter" /etc/sysctl.conf
	then
		sed -i -e 's/net.ipv4.conf.default.rp_filter.*/net.ipv4.conf.default.rp_filter = 1/g' /etc/sysctl.conf
	else
		echo "net.ipv4.conf.default.rp_filter = 1" >> /etc/sysctl.conf
	fi
	sysctl -p
}

check-610() {
	echo '-	Comando: cat /proc/sys/net/ipv4/tcp_syncookies' | tee -a $arquivodelog
	echo "-	Resultado: " | tee -a $arquivodelog
	mudacor default

	cat /proc/sys/net/ipv4/tcp_syncookies | tee -a $arquivodelog
	cat /proc/sys/net/ipv4/tcp_syncookies | grep -q "1"
	check-conformidade
}

apply-610() {
	cp /etc/sysctl.conf /etc/sysctl.conf.bak-$curitem-$(date +%Y%m%d-%H%M%S)

	if grep -q "net.ipv4.tcp_syncookies" /etc/sysctl.conf
	then
		sed -i -e 's/net.ipv4.tcp_syncookies.*/net.ipv4.tcp_syncookies = 1/g' /etc/sysctl.conf
	else
		echo "net.ipv4.tcp_syncookies = 1" >> /etc/sysctl.conf
	fi

	systemctl -p
}

check-611() {
	echo '-	Comando: iwconfig ifdown' | tee -a $arquivodelog
	echo "-	Resultado: " | tee -a $arquivodelog
	mudacor default

	if [ $(which iwconfig &> /dev/null) ]
	then
		iwconfig ifdown | tee -a $arquivodelog
		[ $(iwconfig ifdown | wc -l) -eq 0 ] && true || false
	else
		echo "Comando iwconfig não encontrado no servidor." | tee -a $arquivodelog
		true
	fi
	check-conformidade
}

apply-611() {
	iwconfig ifdown
}

case "$1" in
	check-all)
		check-all
		;;
	summary)
		check-all &> /dev/null
		egrep "OK|FAILED|WARNING" $arquivodelog
		;;
	check)
		numero=$2
		check-unico
		;;
	apply)
		numero=$2
		apply-unico
		;;
	*)
		echo $"Usage: hardening_fast (check | summary | apply [numero] | check [numero])"
		exit 1
		;;
esac

exit $?
